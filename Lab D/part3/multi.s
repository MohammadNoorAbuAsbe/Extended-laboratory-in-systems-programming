extern printf
extern malloc
extern free

global main

SECTION .data
    numFormat db "%d", 10, 0
    strFormat db "%s", 10, 0
    hexFormat db "%x", 10, 0
    newLineFormat db 10, 0

SECTION .bss
    prngSeed resw 1
    STATE resw 1

SECTION .text
main:
    push ebp
    mov ebp, esp

    ; Initialize PRNG seed
    mov word [prngSeed], 0xACE1

    ; Call PRmulti
    call PRmulti

    ; Cleanup and exit
    mov esp, ebp
    pop ebp
    ret

rand_num:
    push ebp
    mov ebp, esp

    ; Load the state and mask variables
    mov edx, [STATE]
    mov cx, 0x8005  ; Mask for 16-bit LFSR

    ; Compute the parity of the relevant bits
    mov ax, dx
    and ax, cx
    xor ah, al
    setpo al       ; Set AL (low byte of AX) to the parity flag

    ; Shift the state one position to the right with the MSB determined by the parity
    shr dx, 1
    rcr dx, 1
    and dl, 0xFE   ; Clear the LSB of DL (low byte of DX)
    or dl, al     ; Set the LSB of DL to the parity bit

    ; Store the updated state
    mov [STATE], dx

    mov eax, edx
    pop ebp
    ret

PRmulti:
    push ebp
    mov ebp, esp

    ; Generate length n in bytes
    call rand_num
    test al, al    ; Check if the generated byte is zero
    jz PRmulti     ; If zero, generate a new random byte

    ; Store length n in ECX
    movzx ecx, al

    ; Allocate memory for the multi-precision integer
    push ecx       ; Push the length onto the stack
    call malloc
    mov dword [ebp - 4], eax ; Store the pointer to the allocated memory

    ; Generate n bytes of random data
    xor ebx, ebx   ; Clear EBX (accumulator)
PRmulti_loop:
    call rand_num  ; Generate a random byte
    movzx eax, al
    shl ebx, 8     ; Shift EBX left by 8 bits
    or bl, al      ; OR the lower 8 bits of EBX with the generated byte
    loop PRmulti_loop

    ; Store the generated multi-precision integer
    mov esi, [ebp - 4] ; Get the pointer to the allocated memory
    mov [esi], ebx ; Store the generated value

    ; Print the generated multi-precision integer
    push esi ; Push the pointer to the allocated memory onto the stack
    push hexFormat ; Push the format string for printing
    call printf

    ; Cleanup and return
    mov eax, [ebp - 4] ; Get the pointer to the allocated memory
    push eax ; Push the pointer onto the stack
    call free ; Free the allocated memory

    mov esp, ebp
    pop ebp
    ret